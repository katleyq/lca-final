---
title: "ESM 273: LCA Final"
format: 
  html:
    code-fold: true
    theme: lux
    embed-resources: true
execute:
  warning: false
  message: false
---

# Data wrangling for Container LCA

## Set up

```{r}
library(tidyverse)
library(here)
library(gt)
library(googlesheets4)
library(janitor)
```


Connect to google sheets

```{r}
# authenticate with google sheets
# gs4_auth()

# set up URL
source("R/url.R")

# pull in aluminium data 
aluminium_sheet <- read_sheet(sheet_id, sheet = "Aluminium") %>% 
  clean_names()

glass_sheet <- read_sheet(sheet_id, sheet = "GlassBottle") %>% 
  clean_names()

PET_sheet <- read_sheet(sheet_id, sheet = "PET_Bottle") %>% 
  clean_names()
```

## Aluminum container wrangling

```{r}
# function for wrangling aluminium scenario
process_aluminum_scenario <- function(data_sheet, row_range, scenario_name) {
  data_sheet %>%
    slice(row_range) %>%
    select(x4:x20) %>%
    mutate(row_id = row_number()) %>%
    mutate(across(x4:x20,
                 ~if_else(row_id == 1 & . == "NULL",
                          "Total_Impact", as.character(.)))) %>%
    select(-row_id) %>%
    {
      df <- .
      colnames(df) <- as.character(unlist(df[1, ]))
      df[-1, ]
    } %>%
    janitor::clean_names(allow_dupes = FALSE) %>% 
    rename(impact_category = 1) %>%
    pivot_longer(
      cols = -impact_category,
      names_to = "process",
      values_to = "value"
    ) %>%
    filter(!is.na(value)) %>%
    mutate(
      value = as.numeric(str_replace_all(value, "NULL", NA_character_))
    ) %>%
    separate(impact_category,
             into = c("impact_method", "impact_type", "unit"),
             sep = ", |\\[|\\]",
             fill = "right") %>%
    mutate(
      unit = str_trim(unit),
      unit = str_remove(unit, "\\]$")
    ) %>%
    mutate(scenario = scenario_name, ,
           container = "aluminium")
}


# process each scenario
alum_base_scen <- process_aluminum_scenario(aluminium_sheet, 3:14, "base_scenario")
alum_truck0 <- process_aluminum_scenario(aluminium_sheet, 35:46, "truck_0")
alum_truck100 <- process_aluminum_scenario(aluminium_sheet, 66:77, "truck_100") 
alum_recycling0 <- process_aluminum_scenario(aluminium_sheet, 97:108, "recycling_0")
alum_recycling100 <- process_aluminum_scenario(aluminium_sheet, 129:140, "recycling_100")

# combine scenarios
alum_clean <- rbind(alum_base_scen,
                   alum_truck0,
                   alum_truck100,
                   alum_recycling0,
                   alum_recycling100)

# remove intermediate df
rm(alum_base_scen, 
   alum_truck0, 
   alum_truck100, 
   alum_recycling0, 
   alum_recycling100)
```

## Glass container wrangling

```{r}
# function to process glass data for different scenarios
process_glass_data <- function(glass_sheet, row_range, scenario_name) {
  glass_sheet %>%
    slice(row_range) %>%
    select(x4:x19) %>%
    mutate(row_id = row_number()) %>%
    mutate(across(x4:x19,
                  ~if_else(row_id == 1 & . == "NULL",
                           "Total_Impact", as.character(.)))) %>%
    select(-row_id) %>%
    {
      df <- .
      colnames(df) <- as.character(unlist(df[1, ]))
      df[-1, ]
    } %>%
    janitor::clean_names(allow_dupes = FALSE) %>%
    rename(impact_category = 1) %>%
    pivot_longer(
      cols = -impact_category,
      names_to = "process",
      values_to = "value"
    ) %>%
    filter(!is.na(value)) %>%
    mutate(
      value = as.numeric(str_replace_all(value, "NULL", NA_character_))
    ) %>%
    separate(impact_category,
             into = c("impact_method", "impact_type", "unit"),
             sep = ", |\\[|\\]",
             fill = "right") %>%
    mutate(
      unit = str_trim(unit),
      unit = str_remove(unit, "\\]$")
    ) %>%
    mutate(scenario = scenario_name,
           container = "glass")
}

# Use the function to process each scenario
glass_base_scen <- process_glass_data(glass_sheet, 4:15, 
                                      "base_scenario")
glass_truck0 <- process_glass_data(glass_sheet, 36:47, 
                                   "truck_0")
glass_truck100 <- process_glass_data(glass_sheet, 74:85, 
                                     "truck_100")
glass_mass_370 <- process_glass_data(glass_sheet, 110:121,
                                     "mass_370")

# combine
glass_clean <- rbind(
  glass_base_scen,
  glass_truck0,
  glass_truck100,
  glass_mass_370
)

rm(glass_base_scen,glass_truck0, glass_truck100, glass_mass_370)
```

## PET bottle wrangling

```{r}
# function to process glass data for different scenarios
process_PET_data <- function(PET_sheet, row_range, scenario_name) {
  PET_sheet %>%
    slice(row_range) %>%
    select(`absolute_value`:x21) %>%
    mutate(row_id = row_number()) %>%
    mutate(
        absolute_value = if_else(row_id == 1, 
                                "impact_category", 
                                as.character(absolute_value)),
        x2 = if_else(row_id == 1, 
                            "total_impact", 
                            as.character(x2))) %>%
    select(-row_id) %>%
    {
      df <- .
      colnames(df) <- as.character(unlist(df[1, ]))
      df[-1, ]
    } %>% 
     janitor::clean_names(allow_dupes = FALSE) %>%
  mutate(across(everything(), ~if(is.list(.x)) as.character(.x) else .x)) %>%
     pivot_longer(
       cols = -`impact_category`,
       names_to = "process",
       values_to = "value"
     ) %>%
     filter(!is.na(value)) %>%
     mutate(
       value = as.numeric(str_replace_all(value, "NULL", NA_character_))
     ) %>%
     separate(impact_category,
              into = c("impact_method", "impact_type", "unit"),
              sep = ", |\\[|\\]",
              fill = "right") %>%
     mutate(
       unit = str_trim(unit),
       unit = str_remove(unit, "\\]$")
     ) %>%
    mutate(scenario = scenario_name,
           container = "PET")
}

# Use the function to process each scenario
PET_base_scen <- process_PET_data(PET_sheet, 2:13, "base_scenario")
PET_truck0 <- process_PET_data(PET_sheet, 34:45, 
                                   "truck_0")
PET_truck100 <- process_PET_data(PET_sheet, 51:62, 
                                     "truck_100")
PET_recycling0 <- process_PET_data(PET_sheet, 68:79, 
                                     "recycling_0")
PET_recycling100 <- process_PET_data(PET_sheet, 84:95, 
                                     "recycling_100")

# combine
PET_clean <- rbind(
  PET_base_scen,
  PET_truck0,
  PET_truck100,
  PET_recycling0,
  PET_recycling100
)

# remove intermediates
rm(PET_base_scen,
  PET_truck0,
  PET_truck100,
  PET_recycling0,
  PET_recycling100)
```

## Combining containers

```{r}
# scratch
# process_list = data.frame(unique(all_containers$process))
```


```{r}
# combine containers
# all_containers <- rbind(alum_clean,
#                        glass_clean,
#                        PET_clean)

all_containers <- rbind(alum_clean,
                        glass_clean,
                        PET_clean) %>%
  select(container, scenario, impact_method, impact_type, unit, process, value) %>%
  mutate(life_cycle = case_when(
    process == "total_impact" ~ "total_impact",
    process == "eu_28_ferro_metals_on_landfill_ts" ~ "end-of-life",
    process == "eu28_efta_primary_aluminium_ingot_consumption_mix_2015_european_aluminium" ~ "production",
    process == "eu28_efta_primary_aluminium_ingot_consumption_mix_2015_european_aluminium_2" ~ "end-of-life",
    process == "eu28_efta_turkey_aluminium_remelting_wrought_alloys_ingot_from_scrap_2015_european_aluminium_p_agg" ~ "end-of-life",
    process == "eu28_efta_turkey_aluminium_sheet_2015_european_aluminium_p_agg" ~ "production",
    process == "glo_rail_transport_cargo_diesel_average_train_gross_tonne_weight_1_000t_726t_payload_capacity_ts_u_so" ~ "transportation",
    process == "glo_truck_euro_5_20_26t_gross_weight_17_3t_payload_capacity_ts_u_so" ~ "transportation",
    process == "	glo_truck_euro_5_20_26t_gross_weight_17_3t_payload_capacity_ts_u_so " ~ "transportation",
    process == "glo_truck_euro_5_20_26t_gross_weight_17_3t_payload_capacity_ts_u_so_2" ~ "transportation",
    process == "glo_truck_euro_5_28_32t_gross_weight_22t_payload_capacity_ts_u_so" ~ "transportation",
    process == "us_diesel_mix_at_refinery_ts" ~ "transportation",
    process == "us_electricity_grid_mix_ts" ~ "production",
    process == "eu_28_container_glass_ts_p_agg" ~ "production",
    process == "eu_28_inert_matter_glass_on_landfill_ts" ~ "end-of-life",
    process == "glo_steel_tinplated_worldsteel" ~ "production",
    process == "glo_truck_euro_5_28_32t_gross_weight_22t_payload_capacity_ts_u_so" ~ "transportation",
    process == "glo_truck_euro_5_28_32t_gross_weight_22t_payload_capacity_ts_u_so_2" ~ "transportation",
    process == "us_lubricants_at_refinery_ts" ~ "production",
    process == "pet_bottle_recycling_lc" ~ "end-of-life",
    process == "eu_28_plastic_waste_on_landfill_ts" ~ "end-of-life",
    process == "eu_28_process_water_ts" ~ "production",
    process == "rer_polyethylene_terephthalate_granulate_bottle_grade_at_plant_plastics_europe" ~ "production",
    process == "rer_polyethylene_terephthalate_granulate_bottle_grade_at_plant_plastics_europe_2" ~ "end-of-life",
    process == "rer_polypropylene_granulate_pp_elcd_plastics_europe_p_agg" ~ "production",
    TRUE ~ NA_character_)
    )
```


## Save data

```{r}
write_csv(all_containers, "data/all_containers.csv")
```

```{r}
containers <- read_csv(here("data/all_containers.csv"))
```

```{r}
containers %>% 
  group_by(container, scenario) %>% 
  filter(process == 'total_impact') %>%
  select(container, scenario, impact_type, unit, process, value) %>% 
  gt() 
```

```{r}
containers %>% 
  group_by(container, scenario) %>% 
  filter(process == 'total_impact') %>% 
  #summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>% 
  ggplot(aes(x = container, y = value, fill = container)) +
  geom_col(position = "dodge") +
  facet_wrap(~scenario) +
  labs(y = "Total Impact",
       x = "Container Type",
       title = "Total Impact of All Scenarios") +
  theme_bw()
```


```{r}
containers %>% 
  group_by(container, scenario) %>% 
  filter(process == 'total_impact') %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>% 
  ggplot(aes(x = container, y = sum_total_impact, fill = container)) +
  geom_col(position = "dodge") +
  facet_wrap(~scenario) +
  labs(y = "Sum of Total Impact",
       x = "Container Type",
       title = "Total Impact of All Scenarios") +
  theme_bw()
```

```{r}
containers %>% 
  group_by(container, scenario) %>% 
  filter(process == 'total_impact') %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>% 
  ggplot(aes(x = scenario, y = sum_total_impact, fill = scenario)) +
  geom_col(position = "dodge") +
  facet_wrap(~container) +
  labs(y = "Sum of Total Impact",
       x = "Container Type",
       title = "Total Impact of All Scenarios") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r}
containers %>% 
  group_by(container, scenario) %>% 
  filter(process == 'total_impact',
         container == 'glass') %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>% 
  ggplot(aes(x = container, y = sum_total_impact, fill = scenario)) +
  geom_col(position = "dodge") +
  labs(y = "Sum of Total Impact",
       x = "Container Type",
       title = "Total Impact of Glass by Scenario") +
  theme_bw()
```

```{r}
containers %>% 
  group_by(container, scenario) %>% 
  filter(process == 'total_impact',
         container == 'PET') %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>% 
  ggplot(aes(x = container, y = sum_total_impact, fill = scenario)) +
  geom_col(position = "dodge") +
  labs(y = "Sum of Total Impact",
       x = "Container Type",
       title = "Total Impact of PET by Scenario") +
  theme_bw()
```


```{r}
containers %>% 
  group_by(container, scenario) %>% 
  filter(process == 'total_impact',
         container == 'aluminium') %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>% 
  ggplot(aes(x = container, y = sum_total_impact, fill = scenario)) +
  geom_col(position = "dodge") +
  labs(y = "Sum of Total Impact",
       x = "Container Type",
       title = "Total Impact of Aluminium by Scenario") +
  theme_bw()
```

```{r}
containers %>% 
  filter(scenario == "base_scenario") %>% 
  group_by(impact_type, container) %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>%
  ggplot(aes(x = impact_type, y = sum_total_impact, fill = container)) +
  geom_col(position = "dodge") +
  labs(y = "Total Impact",
       x = "Impact Category",
       title = "Baseline Scenario by Impact Category") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
```{r}
containers %>% 
  filter(scenario == "recycling_100") %>% 
  group_by(impact_type, container) %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>%
  ggplot(aes(x = impact_type, y = sum_total_impact, fill = container)) +
  geom_col(position = "dodge") +
  labs(y = "Total Impact",
       x = "Impact Category",
       title = "Recycling 100% Scenario by Impact Category") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
containers %>% 
  filter(scenario == "recycling_0") %>% 
  group_by(impact_type, container) %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>%
  ggplot(aes(x = impact_type, y = sum_total_impact, fill = container)) +
  geom_col(position = "dodge") +
  labs(y = "Total Impact",
       x = "Impact Category",
       title = "Recycling 0% Scenario by Impact Category") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
containers %>% 
  filter(scenario == "truck_0") %>% 
  group_by(impact_type, container) %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>%
  ggplot(aes(x = impact_type, y = sum_total_impact, fill = container)) +
  geom_col(position = "dodge") +
  labs(y = "Total Impact",
       x = "Impact Category",
       title = "Truck 0% Scenario by Impact Category") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
containers %>% 
  filter(scenario == "truck_100") %>% 
  group_by(impact_type, container) %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>%
  ggplot(aes(x = impact_type, y = sum_total_impact, fill = container)) +
  geom_col(position = "dodge") +
  labs(y = "Total Impact",
       x = "Impact Category",
       title = "Truck 100% Scenario by Impact Category") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
containers %>% 
  group_by(container, scenario, life_cycle) %>% 
  summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>% 
  filter(life_cycle != "total_impact") %>% 
  ggplot(aes(x = scenario, y = sum_total_impact, 
             fill = container)) +
  geom_col(position = "dodge") +
  labs(y = "Total Impact",
       x = "Scenario",
       title = "Total Impact of All Scenarios") +
  facet_wrap(~life_cycle) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
containers %>% 
  filter(scenario == "base_scenario") %>% 
  group_by(container, impact_type, life_cycle) %>% 
  #summarize(sum_total_impact = sum(value, na.rm = TRUE)) %>% 
  filter(life_cycle != "total_impact") %>% 
  ggplot(aes(x = impact_type, y = value, 
             fill = container)) +
  geom_col(position = "dodge") +
  labs(y = "Total Impact",
       x = "Impacy Category",
       title = "Total Impact of All Categories across Life Cycle Stages",
       subtitle = "Baseline Scenario") +
  facet_wrap(~life_cycle) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Contribution Analysis Results Table
```{r}
containers %>% 
  filter(scenario == "base_scenario") %>% 
  group_by(impact_type, life_cycle) %>%
  filter(container == "aluminium",
         life_cycle != "total_impact") %>%
  summarize(impact_sum = sum(value, na.rm = TRUE))%>%
  pivot_wider(
    names_from = life_cycle,
    values_from = impact_sum
  ) %>% 
  select(impact_type, production, transportation, `end-of-life`) %>%
  ungroup() %>% 
  gt()  %>%
  tab_header(title = "Aluminium") %>%
  fmt_number(
    columns = c(production, transportation, `end-of-life`),
    n_sigfig = 3
  )
```

```{r}
containers %>% 
  filter(scenario == "base_scenario") %>% 
  group_by(impact_type, life_cycle) %>%
  filter(container == "PET",
         life_cycle != "total_impact") %>%
  summarize(impact_sum = sum(value, na.rm = TRUE))%>%
  pivot_wider(
    names_from = life_cycle,
    values_from = impact_sum
  ) %>% 
  select(impact_type, production, transportation, `end-of-life`) %>%
  ungroup() %>% 
  gt()  %>%
  tab_header(title = "PET") %>%
  fmt_number(
    columns = c(production, transportation, `end-of-life`),
    n_sigfig = 3
  )
```

```{r}
containers %>% 
  filter(scenario == "base_scenario") %>% 
  group_by(impact_type, life_cycle) %>%
  filter(container == "glass",
         life_cycle != "total_impact") %>%
  summarize(impact_sum = sum(value, na.rm = TRUE))%>%
  pivot_wider(
    names_from = life_cycle,
    values_from = impact_sum
  ) %>% 
  select(impact_type, production, transportation, `end-of-life`) %>%
  ungroup() %>% 
  gt()  %>%
  tab_header(title = "Glass") %>%
  fmt_number(
    columns = c(production, transportation, `end-of-life`),
    n_sigfig = 3
  )
```

